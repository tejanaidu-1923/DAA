import math
def closest_pair(points):
    def dist(p1, p2):
        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

    def closest_pair_rec(points):
        if len(points) <= 3:
            return min((dist(points[i], points[j]), (points[i], points[j]))
                       for i in range(len(points)) for j in range(i + 1, len(points)))
        mid = len(points) // 2
        left_pair = closest_pair_rec(points[:mid])
        right_pair = closest_pair_rec(points[mid:])
        d = min(left_pair, right_pair)[0]
        
        mid_x = points[mid][0]
        in_strip = [p for p in points if abs(p[0] - mid_x) < d]
        in_strip.sort(key=lambda p: p[1])
        
        min_dist = d
        min_pair = min(left_pair, right_pair, key=lambda x: x[0])
        
        for i in range(len(in_strip)):
            for j in range(i + 1, len(in_strip)):
                if in_strip[j][1] - in_strip[i][1] >= min_dist:
                    break
                if dist(in_strip[i], in_strip[j]) < min_dist:
                    min_dist = dist(in_strip[i], in_strip[j])
                    min_pair = (min_dist, (in_strip[i], in_strip[j]))
        return min_pair
    
    points.sort()
    return closest_pair_rec(points)[1]
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
print(closest_pair(points))
