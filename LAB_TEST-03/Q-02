import heapq
from collections import defaultdict

def dijkstra_edges(n, edges, source, target):
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))  # If graph is undirected
    
    distances = [float('inf')] * n
    distances[source] = 0
    pq = [(0, source)]  # (distance, vertex)
    
    while pq:
        current_distance, u = heapq.heappop(pq)
        
        if u == target:
            return current_distance
        
        if current_distance > distances[u]:
            continue
        
        for v, weight in graph[u]:
            distance = current_distance + weight
            if distance < distances[v]:
                distances[v] = distance
                heapq.heappush(pq, (distance, v))
    
    return distances[target]
n1 = 6
edges1 = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),(1, 2, 10), (1, 3, 15),
    (2, 3, 11), (2, 5, 2),
    (3, 4, 6),
    (4, 5, 9)
]
source1 = 0
target1 = 4
print(dijkstra_edges(n1, edges1, source1, target1))
