import heapq
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __lt__(self, other):
        return self.val < other.val

def mergeKLists(lists):
    min_heap = []
    for l in lists:
        if l:
            heapq.heappush(min_heap, l)
    
    dummy = ListNode(0)
    current = dummy
    
    while min_heap:
        smallest_node = heapq.heappop(min_heap)
        current.next = smallest_node
        current = current.next
        if smallest_node.next:
            heapq.heappush(min_heap, smallest_node.next)
    
    return dummy.next
def print_list(node):
    while node:
        print(node.val, end=" -> ")
        node = node.next
    print("None")
def create_linked_list(vals):
    if not vals:
        return None
    head = ListNode(vals[0])
    current = head
    for val in vals[1:]:
        current.next = ListNode(val)
        current = current.next
    return head
lists = [
    create_linked_list([1, 4, 5]),
    create_linked_list([1, 3, 4]),
    create_linked_list([2, 6])
]

merged_list = mergeKLists(lists)
print_list(merged_list)
