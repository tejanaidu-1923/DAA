import heapq
def dijkstra(n, graph, source):
    distances = [float('inf')] * n
    distances[source] = 0
    priority_queue = [(0, source)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor in range(n):
            weight = graph[current_node][neighbor]
            if weight > 0:  
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))

    return distances
n = 5
graph = [
    [0, 4, 0, 0, 0],
    [4, 0, 8, 0, 0],
    [0, 8, 0, 7, 0],
    [0, 0, 7, 0, 9],
    [0, 0, 0, 9, 0]
]
source = 0
distances = dijkstra(n, graph, source)
print("Shortest distances from node", source, ":")
for i, distance in enumerate(distances):
    print("Node", i, ":", distance)
